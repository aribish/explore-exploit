// multi armed bandit problem

package main

import (
	"fmt"
	"math/rand"
	"time"
)

type Arm struct {
	percentChance, payoff int
}

func intArraySum(arr []int, n int) int {
	var sum int
	for i := 0; i < n; i++ {
		sum += arr[i]
	}

	return sum
}

func pullArm(arm Arm) bool { // returns true on success
	if rand.Intn(100) < arm.percentChance {
		return true
	}

	return false
}

func winStayLoseShift(runs int, arms ...Arm) int { // return total payoff
	var armIdx, payoff int
	for i := 0; i < runs; i++ {
		if pullArm(arms[armIdx]) {
			payoff += arms[armIdx].payoff
		} else {
			armIdx++

			if armIdx == len(arms) {
				armIdx = 0
			}
		}
	}

	return payoff
}

func pullRandom(runs int, arms ...Arm) int {
	var armIdx, payoff int

	for i := 0; i < runs; i++ {
		armIdx = rand.Intn(len(arms));

		if pullArm(arms[armIdx]) {
			payoff += arms[armIdx].payoff;
		}
	}

	return payoff
}

func ballHatPull(runs int, arms ...Arm) int {
	balls := make([]int, len(arms), len(arms))
	var armIdx, payoff int

	// initialize hat
	for i,_ := range balls {
		balls[i] = 1
	}

	for i := 0; i < runs; i++ {
		// pick ball from hat
		armIdx = rand.Intn(intArraySum(balls, len(balls)))
		for j := 1; j < len(balls); j++ {
			if armIdx <= intArraySum(balls, j) {
				armIdx = j
				break
			}
		}

		// pull arm
		if pullArm(arms[armIdx]) {
			payoff += arms[armIdx].payoff
		}

	}

	return payoff
}

func main() {
	const ITER_COUNT int = 100
	const DATA_RUNS int = 20
	var winStayLoseShiftAvg, pullRandomAvg, ballHatPullAvg int

	rand.Seed(time.Now().UnixNano())

	bandRoom := Arm{80, 1}
	millyRoom := Arm{50, 2}
	locker := Arm{33, 3}

	for i := 0; i < DATA_RUNS; i++ {
		winStayLoseShiftAvg += winStayLoseShift(ITER_COUNT, bandRoom, locker, millyRoom)
		pullRandomAvg += pullRandom(ITER_COUNT, bandRoom, locker, millyRoom)
		ballHatPullAvg += ballHatPull(ITER_COUNT, bandRoom, locker, millyRoom)
	}

	winStayLoseShiftAvg /= DATA_RUNS
	pullRandomAvg /= DATA_RUNS
	ballHatPullAvg /= DATA_RUNS

	fmt.Printf("Win Stay, Lose Shift Avg: Payoff/Iterations: %d/%d\n", winStayLoseShiftAvg, ITER_COUNT)
	fmt.Printf("Random Avg: Payoff/Iterations: %d/%d\n", pullRandomAvg, ITER_COUNT)
	fmt.Printf("Zelen's Hat Pull Avg: Payoff/Iterations: %d/%d\n", ballHatPullAvg, ITER_COUNT)
}
